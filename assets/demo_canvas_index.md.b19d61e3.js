import{_ as s,c as a,o as t,O as l}from"./chunks/framework.dd35b821.js";const F=JSON.parse('{"title":"Canvas","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"demo/canvas/index.md","filePath":"demo/canvas/index.md"}'),n={name:"demo/canvas/index.md"},o=l(`<h1 id="canvas" tabindex="-1">Canvas <a class="header-anchor" href="#canvas" aria-label="Permalink to &quot;Canvas&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Title: Canvas 是什么？</p><p>Canvas 是一个 HTML5 元素，用于在 Web 页面上绘制 2D 和 3D 图形。它是 HTML5 标准的一部分，被广泛用于游戏、数据可视化、图表、动画和其他图形应用程序的开发。使用 Canvas，开发人员可以使用 JavaScript 和其他 Web 技术创建交互式和实时的图形应用程序。</p><p>不过，这里我们只关注 2D 图形的绘制。</p></div><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h2><h3 id="_2d-绘图上下文" tabindex="-1">2D 绘图上下文 <a class="header-anchor" href="#_2d-绘图上下文" aria-label="Permalink to &quot;2D 绘图上下文&quot;">​</a></h3><p>2D 绘图上下文提供了绘制 2D 图形的方法，包括矩形、弧形和路径。</p><p>2D 上下文的坐标原点(0, 0)在 <code>&lt;canvas&gt;</code> 元素的左上角。所有坐标值都相对于该点计算，因此 x 坐标向右增长，y 坐标向下增长。</p><p>获取 2D 绘图上下文的代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> canvas </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">canvas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ctx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> canvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContext</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="绘制图形" tabindex="-1">绘制图形 <a class="header-anchor" href="#绘制图形" aria-label="Permalink to &quot;绘制图形&quot;">​</a></h3><hr><h4 id="矩形-rect" tabindex="-1">矩形 Rect <a class="header-anchor" href="#矩形-rect" aria-label="Permalink to &quot;矩形 Rect&quot;">​</a></h4><div class="warning custom-block"><p class="custom-block-title">特别说明</p><p>矩形是唯一一个可以直接在 2D 绘图上下文中绘制的形状。</p><p>与绘制矩形相关的方法有 3 个：fillRect()、strokeRect()和 clearRect()。</p><p>这些方法都接收 4 个参数：矩形 x 坐标、矩形 y 坐标、矩形宽度和矩形高度。</p></div><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-y7e8L" id="tab-UxWksOs" checked="checked"><label for="tab-UxWksOs">示例1: 绘制填充矩形 &amp;&amp; 轮廓矩形</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 绘制半透明蓝色矩形</span></span>
<span class="line"><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fillStyle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rgba(0,0,255,0.5)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fillRect</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 绘制半透明蓝色轮廓的矩形</span></span>
<span class="line"><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">strokeStyle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rgba(0,0,255,0.5)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">strokeRect</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">120</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></div></div><h4 id="路径-path" tabindex="-1">路径 Path <a class="header-anchor" href="#路径-path" aria-label="Permalink to &quot;路径 Path&quot;">​</a></h4><div class="warning custom-block"><p class="custom-block-title">特别说明</p><p>路径，必须首先调用 beginPath()方法以表示要开始绘制新路径。然后，再调用下列方法来绘制路径。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>arc(x, y, radius, startAngle, endAngle, counterclockwise)</td><td>以坐标(x, y)为圆心，以 radius 为半径绘制一条弧线，起始角度为 startAngle，结束角度为 endAngle（都是弧度）。最后一个参数 counterclockwise 表示是否逆时针计算起始角度和结束角度（默认为顺时针）。</td></tr><tr><td>arcTo(x1, y1, x2, y2, radius)</td><td>以给定半径 radius，经由(x1, y1)绘制一条从上一点到(x2, y2)的弧线。</td></tr><tr><td>bezierCurveTo(c1x, c1y, c2x, c2y, x, y)</td><td>以(c1x, c1y)和(c2x, c2y)为控制点，绘制一条从上一点到(x, y)的弧线（三次贝塞尔曲线）。</td></tr><tr><td>lineTo(x, y)</td><td>绘制一条从上一点到(x, y)的直线。</td></tr><tr><td>moveTo(x, y)</td><td>不绘制线条，只把绘制光标移动到(x, y)。</td></tr><tr><td>quadraticCurveTo(cx, cy, x, y)</td><td>以(cx, cy)为控制点，绘制一条从上一点到(x, y)的弧线（二次贝塞尔曲线）。</td></tr><tr><td>rect(x, y, width, height)</td><td>以给定宽度和高度在坐标点(x, y)绘制一个矩形。这个方法与 strokeRect()和 fillRect()的区别在于，它创建的是一条路径，而不是独立的图形。</td></tr></tbody></table><p>创建路径之后，可以使用 closePath()方法绘制一条返回起点的线。</p><p>如果路径已经完成，则既可以指定 fillStyle 属性并调用 fill()方法来填充路径，也可以指定 strokeStyle 属性并调用stroke()方法来描画路径。</p></div>`,15),e=[o];function p(c,r,y,d,i,D){return t(),a("div",null,e)}const A=s(n,[["render",p]]);export{F as __pageData,A as default};
