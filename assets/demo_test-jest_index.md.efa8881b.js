import{_ as l,c as o,z as s,a,E as p,O as e,o as t,G as c}from"./chunks/framework.dd35b821.js";const J=JSON.parse('{"title":"Jest：JavaScript 单元测试框架","description":"","frontmatter":{"outline":"deep","lastUpdated":true},"headers":[],"relativePath":"demo/test-jest/index.md","filePath":"demo/test-jest/index.md"}'),r={name:"demo/test-jest/index.md"},F=s("h1",{id:"jest-javascript-单元测试框架",tabindex:"-1"},[a("Jest：JavaScript 单元测试框架 "),s("a",{class:"header-anchor",href:"#jest-javascript-单元测试框架","aria-label":'Permalink to "Jest：JavaScript 单元测试框架"'},"​")],-1),y=s("h2",{id:"jest-是什么",tabindex:"-1"},[a("Jest 是什么？ "),s("a",{class:"header-anchor",href:"#jest-是什么","aria-label":'Permalink to "Jest 是什么？"'},"​")],-1),D=s("a",{href:"https://jestjs.io/",target:"_blank",rel:"noreferrer"},"点击官网，查看更多内容 →→",-1),i=e(`<h2 id="为什么选-jest-作为单元测试框架" tabindex="-1">为什么选 Jest 作为单元测试框架? <a class="header-anchor" href="#为什么选-jest-作为单元测试框架" aria-label="Permalink to &quot;为什么选 Jest 作为单元测试框架?&quot;">​</a></h2><p>选用 Jest 作为单元测试框架的优点：</p><ol><li>集成度高：Jest 可以与 React、Vue、Angular 等主流 JavaScript 框架及 Babel、Webpack 等工具集成，使得编写测试用例更加便捷。</li><li>缺陷定位快速：Jest 提供了丰富的测试 API 和高度的自动化，可以快速发现代码缺陷及修复。</li><li>运行速度快：Jest 采用并行执行测试用例的策略，同时支持多线程执行，使得测试运行速度更快。</li><li>覆盖率报告全面：Jest 的测试覆盖率报告功能可以帮助开发者更全面地了解测试用例的质量和代码覆盖情况。</li></ol><p>综上，Jest 是一款功能强大、易于使用、性能高效的 JavaScript 单元测试框架。</p><h2 id="如何学习-jest-呢" tabindex="-1">如何学习 Jest 呢？ <a class="header-anchor" href="#如何学习-jest-呢" aria-label="Permalink to &quot;如何学习 Jest 呢？&quot;">​</a></h2><p>学习 Jest 可以按照以下步骤进行：</p><ol><li>安装 Jest: 首先在自己的项目中安装 Jest，可以使用 npm 或者 Yarn 安装，比如 npm install jest。安装完成后，在 package.json 文件中，可以看到 Jest 相关的配置和命令。</li><li>编写测试用例：根据自己的项目和业务场景，编写测试用例，并检查测试用例的正确性和覆盖率。这一步需要了解 Jest 的语言规范和测试 API。</li><li>运行测试用例：使用 Jest 提供的命令行工具或者编辑器插件，运行测试用例并查看测试报告。</li><li>集成其他工具：可以将 Jest 与其他工具集成，如 Babel、Webpack、ESLint 等，以便更好地利用 Jest 的特性和功能。</li><li>深入学习：可以通过阅读 Jest 的官方文档、博客、GitHub 等渠道，深入学习 Jest 的原理和应用，从而优化自己的测试代码和实践。 在学习的过程中，需要注重实践和经验积累，通过不断编写测试用例和运行测试，逐渐熟悉 Jest 的语法和功能，形成自己的测试习惯和风格。</li></ol><h2 id="附录-a-tips-小贴士" tabindex="-1">附录 A：Tips 小贴士 <a class="header-anchor" href="#附录-a-tips-小贴士" aria-label="Permalink to &quot;附录 A：Tips 小贴士&quot;">​</a></h2><h3 id="jest-configuration" tabindex="-1">Jest Configuration <a class="header-anchor" href="#jest-configuration" aria-label="Permalink to &quot;Jest Configuration&quot;">​</a></h3><ul><li>初始化配置文件 jest.config.js <code>jest --init</code></li></ul><h3 id="jest-usage" tabindex="-1">Jest Usage <a class="header-anchor" href="#jest-usage" aria-label="Permalink to &quot;Jest Usage&quot;">​</a></h3><hr><h4 id="matcher-匹配器" tabindex="-1">Matcher 匹配器 <a class="header-anchor" href="#matcher-匹配器" aria-label="Permalink to &quot;Matcher 匹配器&quot;">​</a></h4><p>在 Jest 中，Matcher 是用于断言测试结果是否符合预期的一种机制。Matcher 由 Jest 提供，可以匹配不同类型的值，包括布尔值、数字、字符串、正则表达式、对象、数组等。使用 Matcher 可以方便地验证测试结果是否符合预期，并输出错误信息帮助调试。 Jest 提供了多种 Matcher，如 <code>.toBe()</code> 、 <code>.toEqual()</code> 、 <code>.toContain()</code> 、 <code>.toMatch()</code> 等。这些 Matcher 可以根据实际情况进行选择，并搭配使用，以输出更清晰、更准确的测试结果。 下面是几种常用的 Matcher：</p><ul><li><code>.toBe()</code> ：比较两个值是否完全相等，包括类型和值。</li><li><code>.toEqual()</code> ：比较两个值是否相等，只比较值是否相等，而不比较类型。</li><li><code>.toContain()</code> ：检查某个元素是否包含在数组或字符串中。</li><li><code>.toMatch()</code> ：匹配字符串是否符合正则表达式的规则。</li><li><code>.toThrow()</code> ：检查一个函数是否抛出某个异常。 所有 Matcher 的使用方法都类似，以 <code>.toBe()</code> 为例，示例如下：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">two plus two is four</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>以上代码中， <code>.toBe()</code> 匹配两个值是否相等，并输出错误信息，以帮助调试。Jest 的 Matcher 非常灵活，可以根据实际情况满足不同的测试需求。</p><h4 id="asynchronous-code-异步代码" tabindex="-1">Asynchronous Code 异步代码 <a class="header-anchor" href="#asynchronous-code-异步代码" aria-label="Permalink to &quot;Asynchronous Code 异步代码&quot;">​</a></h4><p>为了测试异步代码，Jest 提供了多种方式：</p><ol><li>使用 <code>.then()/.catch()</code> ：通过 <code>.then()/.catch()</code> 方法来检查异步代码的返回结果，并处理错误。</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test async function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqual</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// fetchData() 定义</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="2"><li>使用 <code>.resolves/.rejects</code> ：使用 <code>.resolves/.rejects</code> 声明期望返回值是否符合预期，这种方法简洁明了。</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test async function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">fetchData</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">resolves</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqual</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// fetchData() 定义</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="3"><li>使用 <code>async/await</code> ：使用 <code>async/await</code> 异步函数语法来处理异步代码，这种方法也很直观。</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test async function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqual</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// fetchData() 定义</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>以上是几种常用的测试异步代码的方式。使用 Jest，可以很方便地处理异步测试，提高测试代码品质和开发效率。</p><h4 id="mock-functions-模拟函数" tabindex="-1">Mock Functions 模拟函数 <a class="header-anchor" href="#mock-functions-模拟函数" aria-label="Permalink to &quot;Mock Functions 模拟函数&quot;">​</a></h4><p>Mock Functions 是 Jest 中的一种内置模拟函数，主要用于模拟被测试代码中的函数、模块、对象等。Mock Functions 可以帮助在测试时，控制函数调用和返回值，以便更精确地测试被测试代码的逻辑和行为。 使用 Mock Functions 可以模拟被测函数的返回结果，以便测试其他函数的逻辑。另外，Mock Functions 还可以模拟 API 请求、数据库查询等场景，以便在测试环境中轻松进行集成测试。 在 Jest 中，可以使用 <code>jest.fn()</code> 方法创建一个 Mock Function，具体用法如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> jest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mock function test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 检测模拟函数是否被调用</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toHaveBeenCalled</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 检测模拟函数调用时，传的参数是不是 &#39;hello&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toHaveBeenCalledWith</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>以上代码中，首先使用 <code>jest.fn()</code> 方法创建了一个 Mock Function，然后在测试用例中调用该函数并检查函数是否被调用，以及传入的参数是否正确。 除了基本的调用、传参和返回值功能，Mock Functions 还支持其他属性和方法，如 <code>.mock.calls</code> 可以获取调用次数和参数， <code>.mock.results</code> 可以获取所有调用的结果等。Mock Functions 提供了丰富的功能和 API，可以满足多种测试场景的需求。</p>`,30);function A(C,d,h,u,f,m){const n=c("Badge");return t(),o("div",null,[F,y,s("p",null,[a("Jest "),p(n,{type:"info",text:"^29.5.0"}),a(" 是一个 JavaScript 单元测试框架。"),D]),i])}const E=l(r,[["render",A]]);export{J as __pageData,E as default};
